Program usage:
User may provide two arguments: number of records(to be sorted) [with -n option] and input sort order [with -i option]
Program Behaviours:
1.If you have not specified either or any of the required arguments, we assume default values of:	Number of records: 10000 and input sort order: unsorted input
2.The number of records must be greater than or equal to 0.
3.Sort order must be -1, 0, or 1 for descending sorted input, unsorted input, and ascending sorted input

*********Number of records: 1500***********
Input will be sorted in ascending sorted order

*********Input generation start!!********
Test case: Sorted (Ascending) Input!!
*************** SYSTEM CONFIGURATION USED (in # of records) ***************
RAM CAPACITY : 1024
BUFFER CAPACITY : 32
CACHE CAPACITY : 16
PAGE SIZE : 4
**********************************************************


Starting the sort now:



All records scanned

************************************************************************
Stats for input 
Parity Check(XOR): 13
Number of inversions : 0 
Witnessed rows : 1500 
************************************************************************
Scan.cpp:59:~ScanIterator produced 1500 of 1500 rows

*********Input generation complete!!********
Filter.cpp:39:~FilterIterator produced 1500 of 1500 rows


Completed the sort!!

***************Execution time for exeternal merge sort: 12976.2 ms ***************
Sort.cpp:200:SortIterator *** The main thing! *** consumed 1500 rows
Iterator.cpp:41:run entire plan produced 1500 rows
************************************************************************
Stats for output 
Parity Check(XOR): 13
Number of inversions : 0 
Witnessed rows : 1500 
************************************************************************
Sort.cpp:210:~SortIterator *** The main thing! *** produced 1500 of 1500 rows
